module stopwatch (
    input clk,             
    input reset,           
    input start_stop,     
    output [6:0] seg1,     
    output [6:0] seg2,     
    output [6:0] seg3,     
    output [6:0] seg4      
);

    reg [25:0] clk_divider; 
    reg one_hz_clk;         
    reg running;            
    reg [5:0] seconds;      
    reg [5:0] minutes;      
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            clk_divider <= 0;
            one_hz_clk <= 0;
        end else if (clk_divider == 50000000 - 1) begin
            clk_divider <= 0;
            one_hz_clk <= ~one_hz_clk;
        end else begin
            clk_divider <= clk_divider + 1;
        end
    end

    
    always @(posedge start_stop or posedge reset) begin
        if (reset)
            running <= 0;
        else
            running <= ~running;
    end

    
    always @(posedge one_hz_clk or posedge reset) begin
        if (reset) begin
            seconds <= 0;
            minutes <= 0;
        end else if (running) begin
            if (seconds == 59) begin
                seconds <= 0;
                if (minutes == 59)
                    minutes <= 0;
                else
                    minutes <= minutes + 1;
            end else begin
                seconds <= seconds + 1;
            end
        end
    end

    
    function [6:0] seg_decoder;
        input [3:0] digit;
        case (digit)
            4'd0: seg_decoder = 7'b1000000;
            4'd1: seg_decoder = 7'b1111001;
            4'd2: seg_decoder = 7'b0100100;
            4'd3: seg_decoder = 7'b0110000;
            4'd4: seg_decoder = 7'b0011001;
            4'd5: seg_decoder = 7'b0010010;
            4'd6: seg_decoder = 7'b0000010;
            4'd7: seg_decoder = 7'b1111000;
            4'd8: seg_decoder = 7'b0000000;
            4'd9: seg_decoder = 7'b0010000;
            default: seg_decoder = 7'b1111111;
        endcase
    endfunction

    
    assign seg1 = seg_decoder(seconds % 10);
    assign seg2 = seg_decoder(seconds / 10);
    assign seg3 = seg_decoder(minutes % 10);
    assign seg4 = seg_decoder(minutes / 10);

endmodule